const fs = require( 'fs' )

const props = {
  Quality : {
    id : 'd018',
    dt : 'U16',
    values : {
      '0100' : 'Raw',
      '0200' : 'Fine',
      '0300' : 'Normal',
      '0400' : 'Fine Raw',
      '0500' : 'Normal Raw',
    }
  }
}

function swapInt16( hexString ) {
  const buffer = Buffer.from(hexString, 'hex');
  const reversedBuffer = Buffer.from(buffer.reverse());
  return reversedBuffer.toString('hex');
}

const headers = []
const body = []
const body_header = []
const fn = []

headers.push( "#pragma once" )
headers.push( "" )
headers.push( `#include "connection.h"`)
headers.push( "" )
headers.push( "// This file is autogenerated" )
headers.push( "" )
headers.push( `const char* prop_get_value_str( prop_t* p );` )
headers.push( "" )

body_header.push( `#include "properties.h"`)
body_header.push( "" )
body_header.push( "// This file is autogenerated" )
body_header.push( "" )

function add_extern_decl( name ) {
  headers.push( `extern prop_t prop_${name};` );
}

function add_extern_value( name, key, value ) {
  const def_id = `PDV_${name}_${key}`.padEnd( 24 )
  headers.push( `#define ${def_id}  ${value}` );
}

function add_case( cval, str ) {
  fn.push( `  case ${cval}: return "${str}";` )
}

function export_prop( Name, p ) {
  // Name = Quality
  const name = Name.toLowerCase()
  add_extern_decl( name )

  body.push( `prop_t prop_${name} = { .id = 0x${p.id}, .name = "${Name}", .data_type = PDT_${p.dt} };`)

  if( p.values ) {
    fn.push( `  if( p->id == 0x${p.id} ) {\n    switch( p->ivalue ) {`)

    Object.keys( p.values ).forEach( kval => {
      const Str = p.values[ kval ];
      const str_id = Str.replace( / /g, "" )
      const hex_val = swapInt16(kval)
      const c_val = `0x${hex_val}`
      add_extern_value( Name, str_id, c_val )

      add_case( c_val, Str );

    })
    fn.push( `  default: break; }\n  }`)
  }

}

function save( lines, ofilename ) {
  const contents = lines.join( '\n' )
  fs.writeFileSync( ofilename, contents );
}

function flush() {

  headers.push( "\n" )
  body.push( "\n" )
  console.log( ">>>>>>>>>>>> properties.h")
  console.log( headers.join( "\n" ))
  save( headers, 'properties.h' )

  console.log( ">>>>>>>>>>>> properties.c")
  body_header.push( `const char* prop_get_value_str( prop_t* p ) {` )
  fn.push( `return "Unknown";\n}\n`)
  body_header.push( fn.join( "\n  " ) )
  body_header.push( body.join( "\n" ) )
  console.log( body_header.join( "\n" ))
  save( body_header, 'properties.c' )
}

Object.keys( props ).forEach( k => {
  export_prop( k, props[k] )
})

flush();

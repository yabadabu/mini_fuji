const fs = require( 'fs' )

const props = {
  Quality : {
    id : 'd018',
    dt : 'U16',
    values : {
      '0001' : 'Raw',
      '0002' : 'Fine',
      '0003' : 'Normal',
      '0004' : 'Fine Raw',
      '0005' : 'Normal Raw',
    }
  },
  
  "Priority Mode" : {
    id : 'd207',
    dt : 'U16',
    values : {
      '0001' : 'Camera',
      '0002' : 'USB',
    }
  },

  "Capture Control" : {
    id : 'd208',
    dt : 'U16',
    values : {
      '0200' : 'AutoFocus',
      '0304' : 'Shoot',
    }
  },

  "Pending Events" : {      // CurrentState in other sources
    id : 'd212',
    dt : 'ARRAY_PROP_VALUES',
    read_only : true,
  },

  "Pre Capture Delay" : {      // CurrentState in other sources
    id : '5012',
    dt : 'U16',
    values : {
      '07d0' : '10 Secs',
      '2710' : '2 Secs',
      '0000' : 'Off',
    }
  },

  "Focus Mode" : {      // CurrentState in other sources
    id : '500a',
    dt : 'U16',
    values : {
      '0001' : 'Manual',
      '8001' : 'Single Auto',
      '8002' : 'Continuous Auto',
    }
  },

}

function swapInt16( hexString ) {
  const buffer = Buffer.from(hexString, 'hex');
  const reversedBuffer = Buffer.from(buffer.reverse());
  return reversedBuffer.toString('hex');
}

const headers = []
const body = []
const body_header = []
const fn = []
const prop_find = []
const registered_ids = {}

headers.push( "#pragma once" )
headers.push( "" )
headers.push( `#include "connection.h"`)
headers.push( "" )
headers.push( "// This file is autogenerated" )
headers.push( "" )
headers.push( `const char* prop_get_value_str( prop_t* p );` )
headers.push( `const prop_t* prop_by_id( uint16_t prop_id );` )

body_header.push( `#include "properties.h"`)
body_header.push( "" )
body_header.push( "// This file is autogenerated" )
body_header.push( "" )

function add_extern_decl( name ) {
  headers.push( `\nextern const prop_t prop_${name};` );
}

function add_extern_value( name, key, value ) {
  const def_id = `PDV_${name}_${key}`.padEnd( 32 )
  headers.push( `#define ${def_id}  ${value}` );
}

function add_case( cval, str ) {
  fn.push( `      case ${cval}: return "${str}";` )
}

function export_prop( Name, p ) {
  // Name = Quality
  const NameId = Name.replace( / /g, "_")
  const name = NameId.toLowerCase()
  add_extern_decl( name )

  if( registered_ids[p.id] ) 
    throw( `Property id 0x${p.id} (${Name}) is already registered to property (${registered_ids[p.id]})`)
  registered_ids[ p.id ] = Name;

  body.push( `const prop_t prop_${name} = { .id = 0x${p.id}, .name = "${Name}", .data_type = PDT_${p.dt},` )
  body.push( `                              .read_only = ${p.read_only ? true : false}, .ivalue = 0, `)
  body.push( `                              .blob = { .count = 0, .data = 0, .reserved = 0 } };`)

  prop_find.push( `    case 0x${p.id}: return &prop_${name};` );

  if( p.values ) {
    fn.push( `  case 0x${p.id}: {  // ${name}\n      switch( p->ivalue ) {`)

    Object.keys( p.values ).forEach( kval => {
      const Str = p.values[ kval ];
      const str_id = Str.replace( / /g, "" )
      const c_val = `0x${kval}`
      add_extern_value( NameId, str_id, c_val )

      add_case( c_val, Str );

    })
    fn.push( `      default: break;`)
    fn.push( `    }`)
    fn.push( `    break;`)
    fn.push( `  }\n`)
  }

}

function save( lines, ofilename ) {
  const contents = lines.join( '\n' )
  fs.writeFileSync( ofilename, contents );
}

function flush() {

  headers.push( "\n" )
  body.push( "\n" )
  console.log( ">>>>>>>>>>>> properties.h")
  console.log( headers.join( "\n" ))
  save( headers, 'properties.h' )

  console.log( ">>>>>>>>>>>> properties.c")
  body_header.push( `const prop_t* prop_by_id( uint16_t prop_id ) {` )
  body_header.push( `  switch( prop_id ) {` )
  body_header.push( prop_find.join( "\n") )
  body_header.push( "    default: break;" )
  body_header.push( "  }" )
  body_header.push( "  return NULL;" )
  body_header.push( "}\n" )

  body_header.push( `const char*   prop_get_value_str( prop_t* p ) {` )
  fn.push( `return "Unknown";\n}\n`)
  body_header.push( fn.join( "\n  " ) )
  body_header.push( body.join( "\n" ) )
  console.log( body_header.join( "\n" ))
  save( body_header, 'properties.c' )
}

fn.push( `  switch( p->id ) {\n`)
Object.keys( props ).forEach( k => {
  export_prop( k, props[k] )
})
fn.push( `  default: break;\n  }`)

flush();
